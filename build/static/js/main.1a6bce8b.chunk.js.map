{"version":3,"sources":["components/RecordList.js","components/MyHeader.js","components/AddNewRecordBtn.js","components/SubFormLv3.js","components/SubFormLv2.js","components/SubFormLv1.js","components/MasterForm.js","components/Wrapper.js","containers/App.js","serviceWorker.js","index.js"],"names":["RecordList","_ref","state","listManageMethods","list","length","react_default","a","createElement","Fragment","reactstrap_es","style","textAlign","map","record","className","recStore","backgroundColor","key","textTransform","size","float","color","onClick","e","MyHeader","padding","AddNewRecordBtn","props","showForm","addNewVis","type","margin","SubFormLv3","setInput","parseInt","wheels","check","onChange","value","checked","legal","name","required","disabled","mode","SubFormLv2","model","for","placeholder","components_SubFormLv3","recalled","SubFormLv1","ownsCar","components_SubFormLv2","MasterForm","processSubmit","console","log","subVis","onSubmit","components_SubFormLv1","buildingBuilt","companyName","Wrapper","mydb","components_MyHeader","marginTop","components_RecordList","formVis","src_components_MasterForm","components_AddNewRecordBtn","window","open","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","onupgradeneeded","result","createObjectStore","autoIncrement","putInitData","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getList","onsuccess","store","transaction","objectStore","objectStoreRequest","get","objectStoreAnotherRequest","getAllKeys","setState","response","addRecord","myMode","myObj","requestStore","add","put","alert","myAnotherRequest","readRecord","data","mymode","sub","myRequest","objectSpread","purgeState","counter","opMode","arguments","undefined","target","innerHTML","deleteRecord","defineProperty","preventDefault","that","delete","components_Wrapper","updateRecord","createRecord","creareRecord","Component","Boolean","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a6bce8b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"reactstrap\";\r\n\r\nconst RecordList = ({ state, listManageMethods }) => {\r\n  if (state.list.length===0){\r\n    return <h2>Database empty! Add your first record!</h2>\r\n  } \r\n  return (\r\n    <>\r\n      <ListGroup style={{ textAlign: \"left\" }}>\r\n        {state.list.map(record => {\r\n          return (\r\n            <ListGroupItem className=\"justify-content-between \" style={record !== state.recStore?{backgroundColor: \"white\"}:{backgroundColor: \"#f8f8f8\"}} key={record}>\r\n              <span style={{ textTransform: \"uppercase\" }}>\r\n                entry no. {record}</span>\r\n              <ButtonGroup size=\"sm\" style={{ float: \"right\" }}>\r\n                <Button color=\"primary\" onClick={(e) => listManageMethods(e, record)}>\r\n                  Read\r\n                </Button>\r\n                <Button color=\"primary\" style={{ backgroundColor: \"#1ea3eb\" }} onClick={(e) => listManageMethods(e, record)}>\r\n                  Update\r\n                </Button>\r\n                <Button color=\"dark\" onClick={(e) => listManageMethods(e, record)}>\r\n                  Delete\r\n                </Button>\r\n              </ButtonGroup>\r\n            </ListGroupItem>\r\n          );\r\n        })}\r\n      </ListGroup>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecordList;\r\n\r\n","import React from 'react';\r\nconst MyHeader = () => {\r\n  return (\r\n    <header className=\"fixed-top border-bottom border-white bg-primary text-white\"\r\n      style={{ padding: \"15px\", }}>\r\n      <p className=\"lead font-weight-bold\">SKYGATE challenge</p>\r\n      <p>CRUD form manager integrated with IndexedDB</p>\r\n    </header>\r\n  )\r\n}\r\nexport default MyHeader;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst AddNewRecordBtn = (props) => {\r\n  const { state, showForm } = props;\r\n  return (state.addNewVis === 0) ? null : (\r\n    <div>\r\n      <Button\r\n        color=\"primary\"\r\n        type=\"button\"\r\n        style={{ margin: \"20px\" }}\r\n        onClick={()=>showForm(\"add\")}>\r\n        Add New Record\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nexport default AddNewRecordBtn;\r\n","import React from \"react\";\r\nimport { FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nconst SubFormLv3 = ({ state, setInput }) => {\r\n  return parseInt(state.wheels) > 4 ? (\r\n    <><Label>Is your Ford road legal?</Label>\r\n      <FormGroup className=\"mgr\" check><Label check>\r\n        <Input onChange={setInput} type=\"radio\" value=\"yes\" checked={state.legal === \"yes\"} name=\"legal\" required disabled={state.mode === \"read\"} />\r\n        YES\r\n        </Label>\r\n      </FormGroup>\r\n      <FormGroup check><Label check>\r\n        <Input onChange={setInput} type=\"radio\" value=\"no\" checked={state.legal === \"no\"} name=\"legal\" required disabled={state.mode === \"read\"}/>\r\n        NO\r\n        </Label>\r\n      </FormGroup>\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default SubFormLv3;\r\n","import React from \"react\";\r\nimport { FormGroup, Label, Input, } from \"reactstrap\";\r\nimport SubFormLv3 from \"./SubFormLv3\";\r\nconst SubFormLv2 = ({ state, setInput }) => {\r\n  if (state.model === \"Ford\") {\r\n    return (\r\n      <>\r\n        <FormGroup className=\"mgr\"><Label for=\"color\">What color is your Ford?</Label>\r\n          <Input onChange={setInput} type=\"text\" name=\"color\" placeholder=\"Yout Ford's color\" value={state.color}  required disabled={state.mode === \"read\"}/>\r\n        </FormGroup>\r\n        <FormGroup className=\"mgr\"><Label for=\"wheels\">How many wheels on your Ford?</Label>\r\n          <Input onChange={setInput} type=\"number\" name=\"wheels\" placeholder=\"Number of wheels\" value={state.wheels} required disabled={state.mode === \"read\"} />\r\n        </FormGroup>\r\n        <SubFormLv3 state={state} setInput={setInput} />\r\n      </>\r\n    );\r\n  } else if (state.model === \"Toyota\") {\r\n    return (\r\n      <>\r\n        <Label>Has your Toyota been recalled?</Label>\r\n        <FormGroup className=\"mgr\" check>\r\n          <Label check>\r\n            <Input onChange={setInput} type=\"radio\" value=\"yes\" checked={state.recalled === \"yes\"} name=\"recalled\" required disabled={state.mode === \"read\"}/>\r\n            YES\r\n        </Label>\r\n        </FormGroup>\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input onChange={setInput} type=\"radio\" value=\"no\" checked={state.recalled === \"no\"} name=\"recalled\" required disabled={state.mode === \"read\"}/>\r\n            NO\r\n      </Label>\r\n        </FormGroup>\r\n      </>\r\n    );\r\n  } else return null;\r\n};\r\nexport default SubFormLv2;\r\n","import React from \"react\";\r\nimport { FormGroup, Label, Input } from \"reactstrap\";\r\nimport SubFormLv2 from \"./SubFormLv2\";\r\n\r\nconst SubFormLv1 = ({ state, setInput }) => {\r\n  return state.ownsCar === \"yes\" ? (\r\n    <>\r\n      <FormGroup className=\"mgr\">\r\n        <Label for=\"companyName\">What is your car's model?</Label>\r\n        <Input disabled={state.mode === \"read\"} onChange={setInput} type=\"text\" name=\"model\" placeholder=\"Car's model\" value={state.model} required />\r\n      </FormGroup>\r\n      <SubFormLv2 state={state} setInput={setInput} />\r\n    </>\r\n  ) : null;\r\n};\r\nexport default SubFormLv1;\r\n","import React from \"react\";\r\nimport { Form, FormGroup, Label, Input, Button, Badge } from \"reactstrap\";\r\nimport \"./MasterForm.css\";\r\nimport SubFormLv1 from \"./SubFormLv1\";\r\n\r\nconst MasterForm = (props) => {\r\n  const { state, setInput, processSubmit } = props;\r\n  console.log (\"SUBVIS IS: \" ,state.subVis, \"OWNS_CAR:\", state.ownsCar);\r\n  return (\r\n    <div>\r\n      <h5>mode: <Badge color=\"secondary\">{state.mode}</Badge></h5>\r\n      <Form style={{ textAlign: \"left\" }} onSubmit={(e)=>processSubmit(e,state.mode)}>\r\n        <Label>Do you own a car?</Label>\r\n        <FormGroup check> <Label check>\r\n          <Input onChange={setInput} type=\"radio\" disabled={state.mode === \"read\"} value=\"yes\" checked={state.ownsCar === \"yes\"} name=\"ownsCar\" required  />\r\n          YES\r\n            </Label></FormGroup>\r\n        <FormGroup check><Label check>\r\n          <Input onChange={setInput} type=\"radio\" disabled={state.mode === \"read\"} value=\"no\" checked={state.ownsCar === \"no\"} name=\"ownsCar\" required  />\r\n          NO\r\n            </Label></FormGroup>\r\n        <SubFormLv1 state={state} setInput={setInput} />\r\n        <FormGroup className=\"mgr\"><Label for=\"building\">What year was your building built?</Label>\r\n          <Input onChange={setInput} type=\"number\" name=\"buildingBuilt\" placeholder=\"Enter number\" value={state.buildingBuilt} required disabled={state.mode === \"read\"} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"companyName\">Company name</Label>\r\n          <Input type=\"text\" name=\"companyName\" placeholder=\"Company name\" value={state.companyName} required disabled={state.mode === \"read\"} onChange={setInput} />\r\n        </FormGroup>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          {state.subVis ? <Button color=\"primary\">Submit</Button> : null}\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\nexport default MasterForm;\r\n","import React from 'react';\r\nimport RecordList from './RecordList';\r\nimport MyHeader from './MyHeader';\r\nimport { Container } from \"reactstrap\";\r\nimport AddNewRecordBtn from './AddNewRecordBtn'\r\nimport MasterForm from './MasterForm';\r\n\r\nconst Wrapper = (props) => {\r\n  const { state, showForm, listManageMethods, setInput, processSubmit, mydb, } = props;\r\n  return (\r\n    <>\r\n      <MyHeader />\r\n      <main>\r\n        <Container style={{ marginTop: \"160px\" }}>\r\n          <h5>DATABASE: {mydb[0]} v.{mydb[2]}</h5>\r\n          <h6>STORE: {mydb[1]}</h6>\r\n          <RecordList state={state} listManageMethods={listManageMethods} />\r\n          {state.formVis ? <MasterForm setInput={setInput} state={state} processSubmit={processSubmit} /> : null}\r\n          <AddNewRecordBtn state={state} showForm={showForm} />\r\n        </Container>\r\n      </main>\r\n    </>\r\n  )\r\n}\r\nexport default Wrapper;","import React, {\r\n  Component\r\n} from 'react';\r\nimport './App.css';\r\nimport Wrapper from '../components/Wrapper';\r\nconst DB_NAME = \"sky\";\r\nconst DB_VERSION = 1;\r\nconst DB_STORE_NAME = \"store\";\r\n\r\nif (!('indexedDB' in window)) {\r\n  console.log('This browser doesn\\'t support IndexedDB');\r\n}\r\n\r\nfunction putInitData() {\r\n  let indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB\r\n  let open = indexedDB.open('db-name', 1)\r\n  open.onupgradeneeded = function () {\r\n    let db = open.result\r\n    db.createObjectStore('objectStoreName', {\r\n      autoIncrement: true\r\n    });\r\n  }\r\n}\r\nputInitData()\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      recStore: '',\r\n      list: [],\r\n      addNewVis: 1,\r\n      formVis: 0,\r\n      subVis: 1,\r\n      mode: 'none',\r\n      ownsCar: '',\r\n      buildingBuilt: '',\r\n      companyName: '',\r\n      model: '',\r\n      color: '',\r\n      wheels: '',\r\n      legal: '',\r\n      recalled: ''\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  getList = () => {\r\n    let open = indexedDB.open('db-name', 1);\r\n    open.onsuccess = () => {\r\n      let db = open.result;\r\n      let tx = db.transaction('objectStoreName', 'readwrite');\r\n      let store = tx.objectStore('objectStoreName');\r\n      var objectStoreRequest = store.get(16);\r\n      var objectStoreAnotherRequest = store.getAllKeys();\r\n\r\n      objectStoreRequest.onsuccess = () => {\r\n        this.setState({\r\n          response: objectStoreRequest.result\r\n        });\r\n      }\r\n      objectStoreAnotherRequest.onsuccess = () => {\r\n        this.setState({\r\n          list: objectStoreAnotherRequest.result\r\n        });\r\n      }\r\n    }\r\n  }\r\n  deleteRecord(record) {\r\n    var that = this;\r\n    //console.log('still here');\r\n    let open = indexedDB.open('db-name', 1);\r\n    open.onsuccess = function () {\r\n      let db = open.result;\r\n      let requestStore = db.transaction('objectStoreName', \"readwrite\").objectStore('objectStoreName');\r\n      let myRequest = requestStore.delete(record);\r\n      myRequest.onsuccess = () => {\r\n        let myAnotherRequest = requestStore.getAllKeys();\r\n        myAnotherRequest.onsuccess = () => {\r\n          that.setState({\r\n            list: myAnotherRequest.result\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  addRecord = (e, myMode) => {\r\n    let myObj = {};\r\n    myObj.ownsCar = this.state.ownsCar;\r\n    myObj.buildingBuilt = this.state.buildingBuilt;\r\n    myObj.companyName = this.state.companyName;\r\n    if (this.state.ownsCar === \"yes\") {\r\n      myObj.model = this.state.model;\r\n      if (this.state.model === \"Toyota\") {\r\n        myObj.recalled = this.state.recalled;\r\n      }\r\n      else if (this.state.model === \"Ford\") {\r\n        myObj.color = this.state.color;\r\n        myObj.wheels = this.state.wheels;\r\n        if (parseInt(this.state.wheels) > 4) {\r\n          myObj.legal = this.state.legal\r\n        }\r\n      }\r\n    };\r\n    let open = indexedDB.open('db-name', 1);\r\n    open.onsuccess = () => {\r\n      let db = open.result;\r\n      let requestStore = db.transaction('objectStoreName', \"readwrite\").objectStore('objectStoreName');\r\n      let myRequest;\r\n      myRequest = myMode === \"add\" ? requestStore.add(myObj) : requestStore.put(myObj, this.state.recStore);\r\n\r\n      myRequest.onsuccess = () => {\r\n        alert('RECORD ADDED/UPDATED');\r\n        this.setState({\r\n          formVis: 0,\r\n          addNewVis: 1,\r\n          mode: \"none\"\r\n        });\r\n        let myAnotherRequest = requestStore.getAllKeys();\r\n        myAnotherRequest.onsuccess = () => {\r\n          this.setState({\r\n            list: myAnotherRequest.result\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  readRecord = (e, data, mymode) => {\r\n    let sub = mymode === \"read\" ? 0 : 1;\r\n    let myObj = data;\r\n    let open = indexedDB.open('db-name', 1);\r\n    open.onsuccess = () => {\r\n      let db = open.result;\r\n      let requestStore = db.transaction('objectStoreName').objectStore('objectStoreName');\r\n      let myRequest = requestStore.get(myObj);\r\n      myRequest.onsuccess = () => {\r\n        alert('RECORD RETRIEVED');\r\n        this.setState({ formVis: 1, addNewVis: 1, subVis: sub, mode: mymode, ...myRequest.result });\r\n      }\r\n    }\r\n  }\r\n  purgeState = () => {\r\n    console.log('PURGING')\r\n    let myObj = { ...this.state };\r\n    console.log(myObj)\r\n\r\n    let counter = 0;\r\n    for (let key in myObj) {\r\n      if (counter >= 6) {\r\n        myObj[key] = '';\r\n      }\r\n      counter++;\r\n    }\r\n    return myObj;\r\n  }\r\n  showForm = (opMode) => {\r\n    console.log('WAS CLICKED', opMode);\r\n\r\n    this.setState({\r\n      formVis: 1,\r\n      addNewVis: 0,\r\n      mode: \"add\",\r\n      subVis: 1, ...this.purgeState()\r\n    });\r\n    /*hotfix to potential purge problem\r\n    rebuilding state to desired condition*/\r\n    this.setState({ mode: \"add\", subVis: 1, addNewVis: 0, formVis: 1 })\r\n  }\r\n  listManageMethods = (e, data = 0) => {\r\n    console.log(\"ATTEMPTING TO CHANGE:\", e.target.innerHTML);\r\n    if (e.target.innerHTML === \"Delete\") {\r\n      this.deleteRecord(data)\r\n    }\r\n    else if (e.target.innerHTML === \"Update\") {\r\n      /*not the real update yet, just reading and setting up form\r\n      probably I should unify naming conventions*/\r\n\r\n      this.setState({ recStore: data });\r\n      this.readRecord(e, data, \"update\");\r\n    }\r\n    else {\r\n      this.setState({ recStore: data });\r\n      this.readRecord(e, data, \"read\");\r\n    }\r\n  };\r\n  setInput = (e) => {\r\n    console.log(e.target.name, e.target.value);\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  processSubmit = (e, opMode) => {\r\n    e.preventDefault();\r\n    console.log('ATTEMPTING TO ADD');\r\n    /*And similary this method will \r\n    cater both to adding a record and\r\n    updating it*/\r\n    this.addRecord(e, opMode);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\" >\r\n        <Wrapper state={this.state} mydb={[DB_NAME, DB_STORE_NAME, DB_VERSION]} showForm={this.showForm} readRecord={this.readRecord} updateRecord={this.updateRecord} deleteRecord={this.deleteRecord} createRecord={this.creareRecord} setInput={this.setInput} processSubmit={this.processSubmit} listManageMethods={this.listManageMethods} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}